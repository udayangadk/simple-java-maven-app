pipeline {
  environment {
    registry = "udayangami/myimage"
    registryCredential = 'docker_hub'
    dockerImage = ''
  }
  agent none
  stages {
    stage('Build') {
      agent {
          docker{
              image 'maven:3-alpine'
              args '-v /root/.m2:/root/.m2'
              args '-v /var/run/docker.sock:/var/run/docker.sock' 
          }  
      }
      steps {
        sh 'mvn -B -DskipTests clean package'
      }
    }
    stage('Test Jar File') {
      agent {
          docker{
              image 'maven:3-alpine'
              args '-v /root/.m2:/root/.m2'
              args '-v /var/run/docker.sock:/var/run/docker.sock' 
          }  
      }
      steps{
        script {
          sh './jenkins/scripts/deliver.sh'
        }
      }
    }
    stage('Building Image') {
      agent {
          docker{
              image 'docker'
              args '-v /root/.m2:/root/.m2'
              args '-v /var/run/docker.sock:/var/run/docker.sock' 
          }  
      }
        steps{
          script{
            dockerImage = docker.build registry + ":$BUILD_NUMBER"
          }
        }
    }
    stage('Pushing Image To Repo') {
      agent {
          docker{
              image 'docker'
              args '-v /var/run/docker.sock:/var/run/docker.sock' 
          }  
      }
      steps{
        script {
          docker.withRegistry( '', registryCredential ) {
            dockerImage.push()
          }
        }
      }
    }
    stage('Deploy'){
        parallel{
            stage('Deploying In Dev Env.') {
                agent{docker 'alpine'}
                steps {
                    sh "echo 'This is Dev'"
                }
            }
            stage('Deploying In QA Env.') {
                agent{docker 'alpine'}
                steps {
                    sh "echo 'This is QA'"
                }
            }
            stage('Deploying In Staging Env.') {
                agent{docker 'alpine'}
                steps {
                    sh "echo 'This is Staging'"
                }
            }
            stage('Deploying In Prod Env.') {
                agent{docker 'alpine'}
                steps {
                    timeout(time:10, unit: "SECONDS") {
                        input message: 'Approve Deploy in Prod?', ok: 'Yes'
                    }
                    sh "echo 'This is Prod'"
                }
            }
        }
    }
  }
}
